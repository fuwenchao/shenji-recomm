package com.bj58.shenji.data

/**
 * 职位详情
 * @author jiangzhenxing
 * @created 2016-10-31
 */
case class Position( infoid: String,		// 职位ID
										 scate1: String,		// 一级归属类别，可与hdp_58_common_defaultdb.ds_dict_cmc_category关联
										 scate2: String,		// 二级归属类别，可与hdp_58_common_defaultdb.ds_dict_cmc_category关联
										 scate3: String,		// 三级归属类别，可与hdp_58_common_defaultdb.ds_dict_cmc_category关联
//										 adddate: String,		// 发布时间戳
//										 effectivedate: String,		// 职位有效截止时间戳
//										 postdate: String,	// 最后修改时间戳
										 title: String,		  // 职位标题
										 userid: String,		// 用户ID
										 local: String,		  // 职位展现地域，可与hdp_58_common_defaultdb.ds_dict_cmc_local.localid关联,可能有多个值
										 salary: Int,		    // 最低薪资标示，1：面议 2：1000以下 3：1000-2000 4:2000-3000 5:3000-5000 6:5000-8000 7:8000-12000 8:12000-20000 9:20000-25000 10:25000以上
										 education: Int,		// 学历要求，1:不限 2:高中 3:技校 4:中专 5:大专 6:本科 7:硕士 8:博士
										 experience: Int,	  // 工作年限，1:不限 4:1年以下 5:1-2年 6:3-5年 7:6-7年 8:8-10年 9:10年以上
										 trade: String,		  // 发布职位公司对应行业，244:互联网/电子商务 245:计算机软件 246:计算机硬件 247:IT服务/系统集成 248:通信/电信 
                                            // 249:电子技术/半导体/集成电路 250:仪器仪表/工业自动化 251:财务/审计 252:金融/银行 
                                            // 253:保险 254:贸易/进出口 255:批发/零售 256:快速消费品(食品/饮料等) 257:耐用消费品（家具/家电等） 
                                            // 258:服装/纺织/皮革 259:办公用品及设备 260:钢铁/机械/设备/重工 261:汽车/摩托车 262:医疗/保健/卫生/美容 
                                            // 263:生物/制药/医疗器械 264:广告/创意 265:公关/市场推广/会展 266:文体/影视/艺术 267:媒体传播 
                                            // 268:出版/印刷/造纸 269:房地产/物业管理 270:建筑/建材 271:家居/室内设计/装潢 272:中介/专业服务 
                                            // 273:检测/认证 274:法律/法务 275:教育/科研/培训 276:旅游/酒店 277:娱乐休闲/餐饮/服务 
                                            // 278:交通/运输/物流 279:航天/航空 280:化工/采掘/冶炼 281:能源（电力/水利/矿产） 
                                            // 282:原材料和加工 283:政府/非盈利机构 284:环保 285:农林牧渔 286:多元化集团 3527:人力资源服务 
                                            // 287:其他行业 288:陶瓷卫浴 289:家具灯饰 290:纺织服饰  291：游戏 294:咨询/顾问 295:信托/拍卖 296: 租赁服务
										 enttype: String,		// 发布职位公司对应公司性质，1476:私营 1477:国有 1478:股份制 1479:外商独资/办事处 1480:中外合资/合作 1481:上市公司 1482:事业单位 1483:政府机关 1484:非营利机构 1485:个人企业
										 fresh: Int,		    // 是否接受应届生，0：不接受 1：接受
										 fuli: String,		  // 福利保障，1:五险一金,8:包住,10:包吃,9:年底双薪,6:周末双休,5:交通补助,7:加班补助,2:餐补,3:话补,4:房补
										                    // 数据格式为：1|8|9|4|3|5|7 或 -
										 highlights: String,   // 职位亮点，此项是将福利待遇的选项变为中文，同时增加了用户自己的填写内容
										 additional: String,   // 任职要求附加项，552496:会有加班 552497:需要出差 552498:需要管理团队 552499:异地派遣工作, 
										                       // 552496|552498 没有为‘-’
										 var enterprise: Enterprise = null
                  )  extends Serializable
{
  val sixInsuranceRE = """六险|6险|六金|6金|商业险|商业保险|补充医疗|商业医疗|意外险""".r
  val giftRE = """礼物|福利|节""".r
  val priceRE = """年终奖|奖金""".r
  val guquanRE = """股权""".r
  val lvyouRE = """旅游""".r
  /**
   * 产生用于逻辑回归和决策树回归模型的特征
   * 企业评分，暂缺
   */
  def lrFeatures(locals: Array[String], jobcates: Array[String], cmcLocals: scala.collection.Map[String, String]): Array[Double] = 
  {
    // 职位类别one-hot编码
    val jobcateOneHot = jobcates.map(cate => if (Seq(scate1,scate2,scate3).mkString(",") == cate) 1d else 0d)
    // 地区one-hot编码
    val localSet = local.split(",").toSet
    // 二级地域
//    val localSet = local.split(",").map(cmcLocals.getOrElse(_, "-").split("\002").mkString(",")).toSet
    val localOneHot = locals.map(lc => if (localSet.contains(lc)) 1d else 0d)
    // 倒班，月休4天|每月员工聚餐|旅游奖励、扩展训练| 生日礼物，三节礼物，免费旅游| |节日福利 交通超级方便 | 高奖金|+高提成 | 六险一金（商业险 | 过节费4800+高温费 | 股权激励 | 年终奖 | 5天 每月5天休息 | 社保公积金 | 三险 三金 | 补充医疗保险
    // 是否接受应届生，企业人数，地区，工作类别，薪资one-hot, 学历要求one-hot, 工作年限one-hot，五险一金，包住，包吃，年底双薪,周末双休,交通补助,加班补助,餐补,话补,房补，会有加班，需要出差，需要管理团队，异地派遣工作，企业性质one-hot编码, 职位行业one-hot编码
    val sixInsurance = if (sixInsuranceRE.findFirstIn(highlights) != None) 1d else 0d  // 是否有补充商业险
    val gift = if (giftRE.findFirstIn(highlights) != None) 1d else 0d  // 是否有节日福利，礼品
    val price = if (priceRE.findFirstIn(highlights) != None) 1d else 0d // 是否有奖金或年终奖
    val guquan = if (guquanRE.findFirstIn(highlights) != None) 1d else 0d // 是否有股权
    val lvyou = if (lvyouRE.findFirstIn(highlights) != None) 1d else 0d // 是否有旅游
                                                                // ++: enterprise.sizeOneHot 
    Array[Double](fresh, sixInsurance, gift, price, guquan, lvyou) ++: localOneHot ++: jobcateOneHot ++: salaryOneHot ++: educationOneHot ++: experienceOneHot ++: fuliFeature ++: additionalFeature ++: enttypeOneHot ++: traidOneHot
  }
  
  /**
   * 产生用于决策树回归模型的特征
   * 公司性质为类别型特征，不需one-hot编码
   
  def dtrFeatures: Array[Double] =
  {
    // 是否接受应届生,薪资, 学历要求, 工作年限，企业性质,五险一金，包住，包吃，年底双薪,周末双休,交通补助,加班补助,餐补,话补,房补，会有加班，需要出差，需要管理团队，异地派遣工作，
    Array[Double](fresh) ++: salaryOneHot ++: educationOneHot ++: experienceOneHot ++: fuliFeature ++: additionalFeature ++: enttypeOneHot
  }
  */
  /**
   * 产生用于决策树回归模型的特征
   */
  def dtFeatures: Array[Double] = 
  {
    // 是否接受应届生2，薪资10, 学历要求8, 工作年限7，企业性质11，五险一金，包住，包吃，年底双薪,周末双休,交通补助,加班补助,餐补,话补,房补，会有加班，需要出差，需要管理团队，异地派遣工作
    Array[Double](fresh, salary-1, education-1, experienceCate, enttypeCate) ++: fuliFeature ++: additionalFeature
  }
  
  /**
   * 工作类别one-hot编码
   */
//  def jobcateOneHot = jobcates.map(cate => if (Seq(scate1,scate2,scate3).mkString(",") == cate) 1d else 0d)
  
  /**
   * 公司性质重新编码为11个类别：0-10
   * 1476:私营 1477:国有 1478:股份制 1479:外商独资/办事处 1480:中外合资/合作 1481:上市公司 1482:事业单位 1483:政府机关 1484:非营利机构 1485:个人企业 -:末知
   */
  def enttypeCate = if (enttype != "-") enttype.toInt - 1476 else 10
  
  /**
   * 工作年限重新编码为7个类别：0-6
   * 1:不限 4:1年以下 5:1-2年 6:3-5年 7:6-7年 8:8-10年 9:10年以上
   */
  def experienceCate =
  {
    experience match {
      case 1 => 0
      case 4 => 1
      case 5 => 2
      case 6 => 3
      case 7 => 4
      case 8 => 5
      case 9 => 6
    }
  }
  
  def salaryOneHot = Range(1, 11).map(s => if (salary == s) 1d else 0d)
  
  def educationOneHot = Range(1, 9).map(e => if (e == education) 1d else 0d)
  
  def experienceOneHot = Array(1, 4, 5, 6, 7, 8, 9).map(e => if (e == experience) 1d else 0d)
  
  def traidOneHot = Array("244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267","268","269","270","271","272","273","274","275","276","277","278","279","280","281","282","283","284","285","286","3527","287","288","289","290","291","294","295","296").map(t => if (t == trade) 1d else 0d)
  
  /**
   * 将公司性质进行one-Hot编码
   * 1476:私营 1477:国有 1478:股份制 1479:外商独资/办事处 1480:中外合资/合作 1481:上市公司 1482:事业单位 1483:政府机关 1484:非营利机构 1485:个人企业
   * 数据为：1478 或 -
   */
  def enttypeOneHot: Array[Double] = 
  {
    Array("1476","1477","1478","1479","1480","1481","1482","1483","1484","1485").map(t => if (t == enttype) 1d else 0d)
  }
  
  /**
   * 福利保障特征
   * 1:五险一金,8:包住,10:包吃,9:年底双薪,6:周末双休,5:交通补助,7:加班补助,2:餐补,3:话补,4:房补
   * 数据格式为：1|8|9|4|3|5|7 或 -
   */
  def fuliFeature: Array[Double] = 
  {
    val fulis = fuli.split("\\|").toSet
    Array("1","8","10","9","6","5","7","2","3","4").map(f => if (fulis.contains(f)) 1d else 0d)
  }
  
  /**
   * 任职要求附加项特征
   * 552496:会有加班 552497:需要出差 552498:需要管理团队 552499:异地派遣工作
   * 数据格式为：552496|552498 没有为‘-’
   */
  def additionalFeature: Array[Double] = 
  {
    val additionals = additional.split("\\|").toSet
    Array("552496","552497","552498","552499").map(a => if (additionals.contains(a)) 1d else 0d)
  }
  
//  val jobcates = "574,4050,4166;574,596,3803;574,611,2288;574,616,3099;574,622,2509;574,4050,4167;574,3126,2459;574,4050,4168;574,602,2482;574,620,2530;574,795,-;577,1131,-;574,602,2483;574,620,2531;574,791,2262;574,620,2532;574,791,2263;574,588,2820;574,615,4148;574,791,2264;577,1857,-;574,588,2821;574,615,4149;574,791,2265;574,792,2934;574,588,2822;574,791,2266;574,792,2935;574,791,2267;574,792,2936;577,1863,-;574,791,2268;574,792,2937;574,791,2269;574,792,2938;574,792,2939;577,689,-;574,616,-;574,587,-;574,630,3832;574,580,2625;574,593,2410;574,594,2242;577,695,-;574,580,2626;574,593,2411;574,622,-;574,3129,2546;574,580,2627;574,593,-;574,593,2412;574,3129,2547;574,580,2628;574,593,2413;574,611,3820;574,3127,4140;574,3129,2548;574,580,2629;574,611,3821;577,1126,-;574,3129,2549;574,3133,2384;574,622,2510;574,793,3837;574,622,2511;574,793,3838;577,1132,-;574,3126,2460;574,611,2291;574,611,4143;574,615,3029;574,622,2512;574,611,2292;574,622,2513;574,793,2244;574,3126,2462;574,611,2293;574,793,2245;577,1858,-;574,793,2246;574,615,4150;574,793,2247;574,615,4151;574,793,2248;577,1864,-;574,615,4152;574,618,3826;574,793,2249;574,602,-;574,615,4153;574,618,3827;574,615,4154;574,618,3828;577,1870,-;574,3133,3172;574,792,2940;574,3133,3173;574,596,4134;574,3132,4039;574,587,2780;574,596,4135;574,617,-;574,5141,5143;574,587,2781;574,588,-;574,5141,5144;574,587,2782;574,620,2544;574,3130,-;574,5141,5145;574,587,2783;574,623,-;574,5141,5146;574,587,2784;574,594,-;574,607,2550;574,-,-;574,5141,5147;574,587,2785;574,791,2278;574,5141,5148;574,587,2786;574,593,3793;577,1127,-;574,5141,5149;574,580,2630;574,587,2787;574,607,2553;574,580,2631;574,587,2788;574,607,2554;574,3129,2551;574,580,2632;574,587,2789;574,606,2165;574,607,2555;577,1133,-;574,3129,2552;574,580,2633;574,606,2166;574,607,2556;574,607,3153;574,580,2634;574,606,2167;574,607,2557;574,607,3154;574,610,3815;574,615,3030;574,607,2558;574,607,3155;574,610,3816;574,615,3031;574,622,3831;577,1859,-;574,606,2169;574,607,2559;574,607,3156;574,615,3032;574,617,2316;574,706,3178;574,580,2637;574,585,3789;574,607,3157;574,615,3033;574,617,2317;574,618,2149;574,580,2638;574,607,3158;574,615,3034;574,617,2318;577,1865,-;574,3128,2168;574,580,2639;574,593,2424;574,607,3159;574,617,2319;574,3130,2340;574,610,3163;574,615,3036;574,793,2250;574,3130,2341;574,610,3164;574,615,3037;574,706,2486;574,793,2251;577,1871,-;574,3130,2342;574,610,3165;574,615,3038;574,706,2487;574,3130,2343;574,610,3166;574,615,3039;574,706,2488;574,3130,2344;574,580,-;574,618,-;574,706,2489;574,3130,2345;574,3132,4040;574,3112,3113;574,3131,-;574,3112,3114;574,3130,2348;574,3132,3167;574,3132,4043;574,3112,3115;574,3132,3168;574,3132,4044;574,3112,3116;574,3132,3169;574,3132,4045;574,630,-;577,1128,-;574,3112,3117;574,3132,4046;574,3112,3118;574,3132,4047;574,5141,5150;574,3132,4048;574,5141,5151;577,1134,-;574,3132,4049;574,5141,5152;574,587,2790;574,618,4159;574,5141,5153;574,587,2791;574,606,3143;574,625,2426;574,5141,5154;574,587,2792;574,606,3144;574,625,2427;574,5141,5155;574,587,2793;574,602,2445;574,606,3145;574,607,3814;574,625,2428;574,5141,5156;574,587,2794;574,602,2446;574,606,2170;574,606,3146;574,607,2560;574,625,2429;574,5141,5157;574,585,3790;574,587,2795;574,602,2447;574,606,2171;574,607,2561;574,618,2150;577,1866,-;574,5141,5158;574,581,3788;574,602,2448;574,606,2172;574,607,2562;574,625,2610;574,757,-;574,5141,5159;574,580,2640;574,602,2449;574,606,2173;574,607,2563;574,607,3160;574,617,2320;574,618,2152;574,580,2641;574,606,2174;574,607,3161;574,617,2321;574,618,2153;574,3128,3147;574,580,2642;574,594,4111;574,606,2175;574,607,3162;574,617,2322;574,618,2154;574,3128,3148;574,607,2566;574,610,-;574,617,2323;574,618,2155;574,3128,3149;574,581,-;574,606,2177;574,607,2567;574,617,2324;574,618,2156;574,3129,2564;574,594,2200;574,706,2490;574,3129,2565;574,594,2201;574,594,4115;574,706,2491;574,3128,2176;574,3132,-;574,594,2202;574,594,4116;574,625,-;574,706,2492;574,594,2203;574,594,4117;574,596,-;574,706,2493;574,3128,2178;574,3129,2568;574,594,2204;574,594,4118;574,706,2494;574,3128,2179;574,3129,2569;574,3130,2350;574,594,2205;574,594,4119;574,598,3804;574,706,2495;574,793,2260;577,1129,-;574,3130,2351;574,594,2206;574,594,2207;574,3130,2353;574,594,2208;574,3130,2354;574,594,2209;574,618,4160;574,621,2764;574,625,2430;577,1867,-;574,625,2431;574,3112,-;574,4050,-;574,625,2432;574,5141,5160;574,602,2450;577,713,-;574,3127,3136;574,5141,5161;574,602,2451;577,684,-;574,3127,3137;574,5141,5162;574,602,2452;574,611,-;574,3127,3138;574,5141,5163;574,602,2453;574,3127,3139;574,3128,3150;574,5141,5164;574,607,2606;574,607,4141;577,690,-;574,3128,3151;574,3127,2444;574,3128,3152;574,3133,-;574,588,3791;574,602,2456;574,607,2608;574,588,3792;574,593,4106;574,602,2457;574,607,2571;574,3132,3027;574,593,4107;574,594,3800;574,602,2458;574,3129,4142;574,3132,3028;574,593,4108;574,594,3801;574,3128,2180;574,3129,2570;574,593,4109;574,594,3802;574,594,4120;574,607,2574;574,594,4121;574,791,-;574,3129,2572;574,594,4122;574,610,2338;574,3129,2573;574,594,4123;574,598,3009;574,610,2339;574,617,2334;574,594,2210;574,617,2335;574,768,2912;574,3129,2575;574,594,2211;574,768,2913;574,3131,2289;574,594,2212;574,594,4126;574,712,2850;574,768,2914;574,594,2213;574,594,4127;574,616,3103;574,712,2851;574,768,2915;574,594,2214;574,594,4128;574,616,3104;574,712,2852;574,768,2916;577,1868,-;574,3127,2636;574,3132,4155;574,594,2215;574,616,3105;574,712,2853;574,767,2868;574,768,2917;574,594,2216;574,606,-;574,712,2854;574,767,2869;574,768,2918;574,594,2217;574,602,3805;574,712,2855;574,768,2919;574,581,2612;574,590,3053;574,594,2218;574,602,3806;574,712,2856;577,685,-;574,581,2613;574,590,3054;574,594,2219;574,602,3807;574,712,2857;574,3128,-;574,581,2614;574,590,3055;574,602,3808;574,712,2858;574,581,2615;574,590,3056;574,602,3809;577,691,-;574,3127,3140;574,581,2616;574,585,2681;574,590,3057;574,3127,3141;574,3134,-;574,581,2617;574,585,2682;574,590,3058;574,616,3075;574,3127,3142;574,580,3786;574,585,2683;574,598,-;574,616,3076;574,622,4300;574,625,2440;574,580,3787;574,585,2684;574,616,3077;574,791,3833;577,1122,-;574,3128,3813;574,585,2685;574,596,2968;574,616,3078;574,625,2442;574,791,3834;574,585,2686;574,596,2969;574,616,3079;574,791,3835;574,795,2900;574,585,2687;574,602,2461;574,791,3836;574,792,-;574,795,2901;574,585,2688;574,795,2902;574,585,2689;574,795,2903;574,598,3010;574,620,3829;574,795,2904;574,4050,4051;574,598,3011;574,795,2905;577,1143,-;574,3132,3035;574,4050,4052;574,598,3012;574,3131,2290;574,4050,4053;574,598,3013;577,1860,-;574,4050,4054;574,598,3014;577,1869,-;574,3131,4144;574,4050,4055;574,598,3015;574,616,3825;574,767,4162;574,3131,4145;574,4050,4056;574,580,2661;574,598,3016;574,607,-;574,610,2346;574,767,4163;574,3131,2294;574,3131,4146;574,594,4131;574,598,3017;574,610,2347;574,630,2374;574,767,2870;574,3131,2295;574,3131,4147;574,594,4132;574,630,2375;574,767,2871;574,768,2920;577,686,-;574,594,4133;574,606,2197;574,610,2349;574,613,-;574,630,2376;574,767,2872;574,768,2921;574,795,4169;574,3129,-;574,630,2377;574,767,2873;574,768,2922;574,630,2378;574,767,2874;577,692,-;574,602,3810;574,767,2875;574,4171,4172;574,590,-;574,602,3811;574,767,2876;574,4171,4173;574,767,2877;574,4171,4174;574,767,2878;577,1123,-;574,4171,4175;574,634,-;574,767,2879;574,4171,4177;574,596,2970;574,616,3080;574,793,-;574,596,2971;574,616,3081;574,596,2972;574,602,4136;574,616,3082;574,757,2964;574,585,2690;574,596,2973;574,602,4137;574,616,3083;574,757,2965;574,585,2691;574,596,2974;574,602,4138;574,616,3084;574,620,3830;574,757,2966;574,585,2692;574,596,2975;574,616,3085;574,622,4030;574,757,2967;574,596,2635;574,596,2976;574,616,3086;574,622,4031;574,596,2977;574,622,4032;574,581,4103;574,622,4033;574,3134,2385;574,581,4104;574,594,2199;574,622,4034;574,3130,3817;574,3134,2386;574,622,4035;574,3130,3818;574,622,4036;574,767,-;577,687,-;574,622,4037;574,585,-;574,620,2522;574,622,4038;574,795,4170;574,620,2523;574,610,2352;574,620,-;574,620,2524;574,588,2812;574,620,2525;574,630,2380;574,588,2813;574,620,2526;574,630,2381;574,4171,-;574,588,2814;574,610,2355;574,620,2527;574,630,2382;577,1124,-;574,588,2815;574,620,2528;574,630,2383;574,588,2816;574,620,2529;574,767,2880;574,588,2817;574,588,3135;574,616,4156;574,767,2881;577,1130,-;574,3134,3174;574,588,2818;574,712,4161;574,767,2882;574,3134,3175;574,588,2819;574,630,2387;574,767,2883;574,3134,3176;574,630,2388;574,3134,3177;574,611,2312;574,611,2313;577,1862,-;574,593,2404;574,594,3794;574,593,2405;574,594,3795;574,609,-;574,630,3170;574,593,2406;574,594,3796;574,630,3171;574,593,2407;574,594,3797;574,611,2280;574,706,-;574,768,-;574,593,2408;574,594,3798;574,611,2281;574,615,-;574,593,2409;574,594,3799;574,611,2282;574,3133,2379;574,611,2283;574,712,-;577,694,-;574,611,2284;574,621,-;574,3126,2454;574,611,2285;574,611,3819;574,615,3822;574,622,2506;574,3126,2455;574,3127,4139;574,4050,4164;574,611,2286;574,615,3823;574,622,2507;574,4050,4165;574,611,2287;574,615,3824;574,622,2508;577,1125,-".split(";")
}

object Position
{
  def apply( infoid: String,		// 职位ID
						 scate1: String,		// 一级归属类别，可与hdp_58_common_defaultdb.ds_dict_cmc_category关联
						 scate2: String,		// 二级归属类别，可与hdp_58_common_defaultdb.ds_dict_cmc_category关联
						 scate3: String,		// 三级归属类别，可与hdp_58_common_defaultdb.ds_dict_cmc_category关联
						 title: String,		  // 职位标题
						 userid: String,		// 用户ID
						 local: String,		  // 职位展现地域，可与hdp_58_common_defaultdb.ds_dict_cmc_local.localid关联,可能有多个值
						 salary: String,		    // 最低薪资标示，1：面议 2：1000以下 3：1000-2000 4:2000-3000 5:3000-5000 6:5000-8000 7:8000-12000 8:12000-20000 9:20000-25000 10:25000以上
						 education: String,		// 学历要求，1:不限 2:高中 3:技校 4:中专 5:大专 6:本科 7:硕士 8:博士
						 experience: String,	  // 工作年限，1:不限 4:1年以下 5:1-2年 6:3-5年 7:6-7年 8:8-10年 9:10年以上
						 trade: String,		  // 发布职位公司对应行业
						 enttype: String,		// 发布职位公司对应公司性质，1476:私营 1477:国有 1478:股份制 1479:外商独资/办事处 1480:中外合资/合作 1481:上市公司 1482:事业单位 1483:政府机关 1484:非营利机构 1485:个人企业
						 fresh: String,		    // 是否接受应届生，0：不接受 1：接受
						 fuli: String,		  // 福利保障，1:五险一金,8:包住,10:包吃,9:年底双薪,6:周末双休,5:交通补助,7:加班补助,2:餐补,3:话补,4:房补
						 highlights: String,   // 职位亮点，此项是将福利待遇的选项变为中文，同时增加了用户自己的填写内容
						 additional: String   // 任职要求附加项，552496:会有加班 552497:需要出差 552498:需要管理团队 552499:异地派遣工作, 
           ): Position = 
  {
    Position(infoid = infoid,
						 scate1 = scate1,
						 scate2 = scate2,
						 scate3 = scate3,
						 title = title,
						 userid = userid,
						 local = local,
						 salary = if (salary == "-") 1 else salary.toInt,
						 education = if (education == "-") 1 else education.toInt,
						 experience = if (experience == "-") 1 else experience.toInt,
						 trade = trade,
						 enttype = enttype,
						 fresh = if (fresh == "-") 1 else fresh.toInt,
						 fuli = fuli,
						 additional = additional,
						 highlights = highlights)
  }
  
  /**
   * 从表中解析数据
   */
  def apply(line: String): Position =
  {
    val field_delim = "\001"
    val values = line.split(field_delim)
    apply(values)
  }
  
  def apply(values: Array[String]): Position =
  {
    Position(infoid = values(0),
						 scate1 = values(2),
						 scate2 = values(3),
						 scate3 = values(4),
						 title = values(6),
						 userid = values(7),
						 local = values(13),
						 salary = values(14),
						 education = values(15),
						 experience = values(16),
						 trade = values(17),
						 enttype = values(18),
						 fresh = values(20),
						 fuli = values(19),
						 highlights = values(21),
						 additional = values(22)
						 )
  }
  
  def dtCates: Map[Int,Int] = Map[Int,Int]((1,10), (2,8), (3,7), (4,11))
  
  def main(args: Array[String]): Unit = {
    println(dtCates)
  }
}